// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bridge/bridge.proto

/*
Package bridge is a generated protocol buffer package.

It is generated from these files:
	bridge/bridge.proto

It has these top-level messages:
	DiscoverParams
	ConfigParams
	Bridge
	BridgeState
	DeviceTypes
	SoftwareUpdate
	ConfigBridge
	AutoInstall
	SoftwareUpdate2
	PortalState
	InternetServices
	ReplacesBridgeID
	Backup
	WhitelistEntry
	WhiteList
	BridgeConfig
*/
package bridge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DiscoverParams struct {
}

func (m *DiscoverParams) Reset()                    { *m = DiscoverParams{} }
func (m *DiscoverParams) String() string            { return proto.CompactTextString(m) }
func (*DiscoverParams) ProtoMessage()               {}
func (*DiscoverParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConfigParams struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ConfigParams) Reset()                    { *m = ConfigParams{} }
func (m *ConfigParams) String() string            { return proto.CompactTextString(m) }
func (*ConfigParams) ProtoMessage()               {}
func (*ConfigParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigParams) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type Bridge struct {
	Id                string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	InternalIPAddress string `protobuf:"bytes,2,opt,name=internalIPAddress" json:"internalIPAddress,omitempty"`
}

func (m *Bridge) Reset()                    { *m = Bridge{} }
func (m *Bridge) String() string            { return proto.CompactTextString(m) }
func (*Bridge) ProtoMessage()               {}
func (*Bridge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Bridge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Bridge) GetInternalIPAddress() string {
	if m != nil {
		return m.InternalIPAddress
	}
	return ""
}

type BridgeState struct {
	Config *BridgeConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *BridgeState) Reset()                    { *m = BridgeState{} }
func (m *BridgeState) String() string            { return proto.CompactTextString(m) }
func (*BridgeState) ProtoMessage()               {}
func (*BridgeState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BridgeState) GetConfig() *BridgeConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type DeviceTypes struct {
	Bridge bool `protobuf:"varint,1,opt,name=bridge" json:"bridge,omitempty"`
}

func (m *DeviceTypes) Reset()                    { *m = DeviceTypes{} }
func (m *DeviceTypes) String() string            { return proto.CompactTextString(m) }
func (*DeviceTypes) ProtoMessage()               {}
func (*DeviceTypes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeviceTypes) GetBridge() bool {
	if m != nil {
		return m.Bridge
	}
	return false
}

type SoftwareUpdate struct {
	UpdateState    float64      `protobuf:"fixed64,1,opt,name=updateState" json:"updateState,omitempty"`
	CheckForUpdate bool         `protobuf:"varint,2,opt,name=checkForUpdate" json:"checkForUpdate,omitempty"`
	DeviceTypes    *DeviceTypes `protobuf:"bytes,3,opt,name=deviceTypes" json:"deviceTypes,omitempty"`
	Url            string       `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Text           string       `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
	Notify         bool         `protobuf:"varint,6,opt,name=notify" json:"notify,omitempty"`
}

func (m *SoftwareUpdate) Reset()                    { *m = SoftwareUpdate{} }
func (m *SoftwareUpdate) String() string            { return proto.CompactTextString(m) }
func (*SoftwareUpdate) ProtoMessage()               {}
func (*SoftwareUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SoftwareUpdate) GetUpdateState() float64 {
	if m != nil {
		return m.UpdateState
	}
	return 0
}

func (m *SoftwareUpdate) GetCheckForUpdate() bool {
	if m != nil {
		return m.CheckForUpdate
	}
	return false
}

func (m *SoftwareUpdate) GetDeviceTypes() *DeviceTypes {
	if m != nil {
		return m.DeviceTypes
	}
	return nil
}

func (m *SoftwareUpdate) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SoftwareUpdate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SoftwareUpdate) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

type ConfigBridge struct {
	State       string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	Lastinstall string `protobuf:"bytes,2,opt,name=lastinstall" json:"lastinstall,omitempty"`
}

func (m *ConfigBridge) Reset()                    { *m = ConfigBridge{} }
func (m *ConfigBridge) String() string            { return proto.CompactTextString(m) }
func (*ConfigBridge) ProtoMessage()               {}
func (*ConfigBridge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ConfigBridge) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ConfigBridge) GetLastinstall() string {
	if m != nil {
		return m.Lastinstall
	}
	return ""
}

type AutoInstall struct {
	Updatetime string `protobuf:"bytes,1,opt,name=updatetime" json:"updatetime,omitempty"`
	On         bool   `protobuf:"varint,2,opt,name=on" json:"on,omitempty"`
}

func (m *AutoInstall) Reset()                    { *m = AutoInstall{} }
func (m *AutoInstall) String() string            { return proto.CompactTextString(m) }
func (*AutoInstall) ProtoMessage()               {}
func (*AutoInstall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AutoInstall) GetUpdatetime() string {
	if m != nil {
		return m.Updatetime
	}
	return ""
}

func (m *AutoInstall) GetOn() bool {
	if m != nil {
		return m.On
	}
	return false
}

type SoftwareUpdate2 struct {
	Checkforupdate bool          `protobuf:"varint,1,opt,name=checkforupdate" json:"checkforupdate,omitempty"`
	Lastchange     string        `protobuf:"bytes,2,opt,name=lastchange" json:"lastchange,omitempty"`
	Bridge         *ConfigBridge `protobuf:"bytes,3,opt,name=bridge" json:"bridge,omitempty"`
	State          string        `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
	Autoinstall    *AutoInstall  `protobuf:"bytes,5,opt,name=autoinstall" json:"autoinstall,omitempty"`
}

func (m *SoftwareUpdate2) Reset()                    { *m = SoftwareUpdate2{} }
func (m *SoftwareUpdate2) String() string            { return proto.CompactTextString(m) }
func (*SoftwareUpdate2) ProtoMessage()               {}
func (*SoftwareUpdate2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SoftwareUpdate2) GetCheckforupdate() bool {
	if m != nil {
		return m.Checkforupdate
	}
	return false
}

func (m *SoftwareUpdate2) GetLastchange() string {
	if m != nil {
		return m.Lastchange
	}
	return ""
}

func (m *SoftwareUpdate2) GetBridge() *ConfigBridge {
	if m != nil {
		return m.Bridge
	}
	return nil
}

func (m *SoftwareUpdate2) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *SoftwareUpdate2) GetAutoinstall() *AutoInstall {
	if m != nil {
		return m.Autoinstall
	}
	return nil
}

type PortalState struct {
	Signedon      bool   `protobuf:"varint,1,opt,name=signedon" json:"signedon,omitempty"`
	Incoming      bool   `protobuf:"varint,2,opt,name=incoming" json:"incoming,omitempty"`
	Outgoing      bool   `protobuf:"varint,3,opt,name=outgoing" json:"outgoing,omitempty"`
	Communication string `protobuf:"bytes,4,opt,name=communication" json:"communication,omitempty"`
}

func (m *PortalState) Reset()                    { *m = PortalState{} }
func (m *PortalState) String() string            { return proto.CompactTextString(m) }
func (*PortalState) ProtoMessage()               {}
func (*PortalState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PortalState) GetSignedon() bool {
	if m != nil {
		return m.Signedon
	}
	return false
}

func (m *PortalState) GetIncoming() bool {
	if m != nil {
		return m.Incoming
	}
	return false
}

func (m *PortalState) GetOutgoing() bool {
	if m != nil {
		return m.Outgoing
	}
	return false
}

func (m *PortalState) GetCommunication() string {
	if m != nil {
		return m.Communication
	}
	return ""
}

type InternetServices struct {
	Internet     string `protobuf:"bytes,1,opt,name=internet" json:"internet,omitempty"`
	Remoteaccess string `protobuf:"bytes,2,opt,name=remoteaccess" json:"remoteaccess,omitempty"`
	Time         string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Swupdate     string `protobuf:"bytes,4,opt,name=swupdate" json:"swupdate,omitempty"`
}

func (m *InternetServices) Reset()                    { *m = InternetServices{} }
func (m *InternetServices) String() string            { return proto.CompactTextString(m) }
func (*InternetServices) ProtoMessage()               {}
func (*InternetServices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InternetServices) GetInternet() string {
	if m != nil {
		return m.Internet
	}
	return ""
}

func (m *InternetServices) GetRemoteaccess() string {
	if m != nil {
		return m.Remoteaccess
	}
	return ""
}

func (m *InternetServices) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *InternetServices) GetSwupdate() string {
	if m != nil {
		return m.Swupdate
	}
	return ""
}

type ReplacesBridgeID struct {
}

func (m *ReplacesBridgeID) Reset()                    { *m = ReplacesBridgeID{} }
func (m *ReplacesBridgeID) String() string            { return proto.CompactTextString(m) }
func (*ReplacesBridgeID) ProtoMessage()               {}
func (*ReplacesBridgeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type Backup struct {
	Status    string  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Errorcode float64 `protobuf:"fixed64,2,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (m *Backup) Reset()                    { *m = Backup{} }
func (m *Backup) String() string            { return proto.CompactTextString(m) }
func (*Backup) ProtoMessage()               {}
func (*Backup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Backup) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Backup) GetErrorcode() float64 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

type WhitelistEntry struct {
	LastUseDate string `protobuf:"bytes,1,opt,name=lastUseDate" json:"lastUseDate,omitempty"`
	CreateDate  string `protobuf:"bytes,2,opt,name=createDate" json:"createDate,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *WhitelistEntry) Reset()                    { *m = WhitelistEntry{} }
func (m *WhitelistEntry) String() string            { return proto.CompactTextString(m) }
func (*WhitelistEntry) ProtoMessage()               {}
func (*WhitelistEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WhitelistEntry) GetLastUseDate() string {
	if m != nil {
		return m.LastUseDate
	}
	return ""
}

func (m *WhitelistEntry) GetCreateDate() string {
	if m != nil {
		return m.CreateDate
	}
	return ""
}

func (m *WhitelistEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WhiteList struct {
}

func (m *WhiteList) Reset()                    { *m = WhiteList{} }
func (m *WhiteList) String() string            { return proto.CompactTextString(m) }
func (*WhiteList) ProtoMessage()               {}
func (*WhiteList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type BridgeConfig struct {
	Name             string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ZigbeeChannel    float64           `protobuf:"fixed64,2,opt,name=zigbeeChannel" json:"zigbeeChannel,omitempty"`
	BridgeID         string            `protobuf:"bytes,3,opt,name=bridgeID" json:"bridgeID,omitempty"`
	Mac              string            `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Dhcp             bool              `protobuf:"varint,5,opt,name=dhcp" json:"dhcp,omitempty"`
	IpAddress        string            `protobuf:"bytes,6,opt,name=ipAddress" json:"ipAddress,omitempty"`
	Netmask          string            `protobuf:"bytes,7,opt,name=netmask" json:"netmask,omitempty"`
	Gateway          string            `protobuf:"bytes,8,opt,name=gateway" json:"gateway,omitempty"`
	ProxyAddress     string            `protobuf:"bytes,9,opt,name=proxyAddress" json:"proxyAddress,omitempty"`
	ProxyPort        float64           `protobuf:"fixed64,10,opt,name=proxyPort" json:"proxyPort,omitempty"`
	UTC              string            `protobuf:"bytes,11,opt,name=UTC" json:"UTC,omitempty"`
	LocalTime        string            `protobuf:"bytes,12,opt,name=localTime" json:"localTime,omitempty"`
	Timezone         string            `protobuf:"bytes,13,opt,name=timezone" json:"timezone,omitempty"`
	ModelID          string            `protobuf:"bytes,14,opt,name=modelID" json:"modelID,omitempty"`
	DatastoreVersion string            `protobuf:"bytes,15,opt,name=datastoreVersion" json:"datastoreVersion,omitempty"`
	SwVersion        string            `protobuf:"bytes,16,opt,name=swVersion" json:"swVersion,omitempty"`
	ApiVersion       string            `protobuf:"bytes,17,opt,name=apiVersion" json:"apiVersion,omitempty"`
	SoftwareUpdate   *SoftwareUpdate   `protobuf:"bytes,18,opt,name=softwareUpdate" json:"softwareUpdate,omitempty"`
	SoftwareUpdate2  *SoftwareUpdate2  `protobuf:"bytes,19,opt,name=softwareUpdate2" json:"softwareUpdate2,omitempty"`
	LinkButton       bool              `protobuf:"varint,20,opt,name=linkButton" json:"linkButton,omitempty"`
	PortalServices   bool              `protobuf:"varint,21,opt,name=portalServices" json:"portalServices,omitempty"`
	PortalConnection string            `protobuf:"bytes,22,opt,name=portalConnection" json:"portalConnection,omitempty"`
	PortalState      *PortalState      `protobuf:"bytes,23,opt,name=portalState" json:"portalState,omitempty"`
	InternetServices *InternetServices `protobuf:"bytes,24,opt,name=internetServices" json:"internetServices,omitempty"`
	Factorynew       bool              `protobuf:"varint,25,opt,name=factorynew" json:"factorynew,omitempty"`
	ReplacesBridgeID *ReplacesBridgeID `protobuf:"bytes,26,opt,name=replacesBridgeID" json:"replacesBridgeID,omitempty"`
	Backup           *Backup           `protobuf:"bytes,27,opt,name=backup" json:"backup,omitempty"`
	StarterKitID     string            `protobuf:"bytes,28,opt,name=starterKitID" json:"starterKitID,omitempty"`
}

func (m *BridgeConfig) Reset()                    { *m = BridgeConfig{} }
func (m *BridgeConfig) String() string            { return proto.CompactTextString(m) }
func (*BridgeConfig) ProtoMessage()               {}
func (*BridgeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BridgeConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BridgeConfig) GetZigbeeChannel() float64 {
	if m != nil {
		return m.ZigbeeChannel
	}
	return 0
}

func (m *BridgeConfig) GetBridgeID() string {
	if m != nil {
		return m.BridgeID
	}
	return ""
}

func (m *BridgeConfig) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *BridgeConfig) GetDhcp() bool {
	if m != nil {
		return m.Dhcp
	}
	return false
}

func (m *BridgeConfig) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *BridgeConfig) GetNetmask() string {
	if m != nil {
		return m.Netmask
	}
	return ""
}

func (m *BridgeConfig) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *BridgeConfig) GetProxyAddress() string {
	if m != nil {
		return m.ProxyAddress
	}
	return ""
}

func (m *BridgeConfig) GetProxyPort() float64 {
	if m != nil {
		return m.ProxyPort
	}
	return 0
}

func (m *BridgeConfig) GetUTC() string {
	if m != nil {
		return m.UTC
	}
	return ""
}

func (m *BridgeConfig) GetLocalTime() string {
	if m != nil {
		return m.LocalTime
	}
	return ""
}

func (m *BridgeConfig) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *BridgeConfig) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *BridgeConfig) GetDatastoreVersion() string {
	if m != nil {
		return m.DatastoreVersion
	}
	return ""
}

func (m *BridgeConfig) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *BridgeConfig) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *BridgeConfig) GetSoftwareUpdate() *SoftwareUpdate {
	if m != nil {
		return m.SoftwareUpdate
	}
	return nil
}

func (m *BridgeConfig) GetSoftwareUpdate2() *SoftwareUpdate2 {
	if m != nil {
		return m.SoftwareUpdate2
	}
	return nil
}

func (m *BridgeConfig) GetLinkButton() bool {
	if m != nil {
		return m.LinkButton
	}
	return false
}

func (m *BridgeConfig) GetPortalServices() bool {
	if m != nil {
		return m.PortalServices
	}
	return false
}

func (m *BridgeConfig) GetPortalConnection() string {
	if m != nil {
		return m.PortalConnection
	}
	return ""
}

func (m *BridgeConfig) GetPortalState() *PortalState {
	if m != nil {
		return m.PortalState
	}
	return nil
}

func (m *BridgeConfig) GetInternetServices() *InternetServices {
	if m != nil {
		return m.InternetServices
	}
	return nil
}

func (m *BridgeConfig) GetFactorynew() bool {
	if m != nil {
		return m.Factorynew
	}
	return false
}

func (m *BridgeConfig) GetReplacesBridgeID() *ReplacesBridgeID {
	if m != nil {
		return m.ReplacesBridgeID
	}
	return nil
}

func (m *BridgeConfig) GetBackup() *Backup {
	if m != nil {
		return m.Backup
	}
	return nil
}

func (m *BridgeConfig) GetStarterKitID() string {
	if m != nil {
		return m.StarterKitID
	}
	return ""
}

func init() {
	proto.RegisterType((*DiscoverParams)(nil), "bridge.DiscoverParams")
	proto.RegisterType((*ConfigParams)(nil), "bridge.ConfigParams")
	proto.RegisterType((*Bridge)(nil), "bridge.Bridge")
	proto.RegisterType((*BridgeState)(nil), "bridge.BridgeState")
	proto.RegisterType((*DeviceTypes)(nil), "bridge.DeviceTypes")
	proto.RegisterType((*SoftwareUpdate)(nil), "bridge.SoftwareUpdate")
	proto.RegisterType((*ConfigBridge)(nil), "bridge.ConfigBridge")
	proto.RegisterType((*AutoInstall)(nil), "bridge.AutoInstall")
	proto.RegisterType((*SoftwareUpdate2)(nil), "bridge.SoftwareUpdate2")
	proto.RegisterType((*PortalState)(nil), "bridge.PortalState")
	proto.RegisterType((*InternetServices)(nil), "bridge.InternetServices")
	proto.RegisterType((*ReplacesBridgeID)(nil), "bridge.ReplacesBridgeID")
	proto.RegisterType((*Backup)(nil), "bridge.Backup")
	proto.RegisterType((*WhitelistEntry)(nil), "bridge.WhitelistEntry")
	proto.RegisterType((*WhiteList)(nil), "bridge.WhiteList")
	proto.RegisterType((*BridgeConfig)(nil), "bridge.BridgeConfig")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Discover(ctx context.Context, in *DiscoverParams, opts ...grpc.CallOption) (Service_DiscoverClient, error)
	GetBridgeState(ctx context.Context, in *ConfigParams, opts ...grpc.CallOption) (*BridgeState, error)
	GetConfig(ctx context.Context, in *ConfigParams, opts ...grpc.CallOption) (*BridgeConfig, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Discover(ctx context.Context, in *DiscoverParams, opts ...grpc.CallOption) (Service_DiscoverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Service_serviceDesc.Streams[0], c.cc, "/bridge.Service/Discover", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceDiscoverClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_DiscoverClient interface {
	Recv() (*Bridge, error)
	grpc.ClientStream
}

type serviceDiscoverClient struct {
	grpc.ClientStream
}

func (x *serviceDiscoverClient) Recv() (*Bridge, error) {
	m := new(Bridge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) GetBridgeState(ctx context.Context, in *ConfigParams, opts ...grpc.CallOption) (*BridgeState, error) {
	out := new(BridgeState)
	err := grpc.Invoke(ctx, "/bridge.Service/GetBridgeState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConfig(ctx context.Context, in *ConfigParams, opts ...grpc.CallOption) (*BridgeConfig, error) {
	out := new(BridgeConfig)
	err := grpc.Invoke(ctx, "/bridge.Service/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Discover(*DiscoverParams, Service_DiscoverServer) error
	GetBridgeState(context.Context, *ConfigParams) (*BridgeState, error)
	GetConfig(context.Context, *ConfigParams) (*BridgeConfig, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Discover_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiscoverParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Discover(m, &serviceDiscoverServer{stream})
}

type Service_DiscoverServer interface {
	Send(*Bridge) error
	grpc.ServerStream
}

type serviceDiscoverServer struct {
	grpc.ServerStream
}

func (x *serviceDiscoverServer) Send(m *Bridge) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_GetBridgeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetBridgeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.Service/GetBridgeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetBridgeState(ctx, req.(*ConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.Service/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConfig(ctx, req.(*ConfigParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBridgeState",
			Handler:    _Service_GetBridgeState_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Service_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Discover",
			Handler:       _Service_Discover_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge/bridge.proto",
}

func init() { proto.RegisterFile("bridge/bridge.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xce, 0xda, 0xb1, 0x2c, 0x8d, 0x1c, 0x59, 0xa1, 0x5d, 0x87, 0x75, 0x83, 0x22, 0x58, 0xb4,
	0x41, 0x51, 0x04, 0x69, 0xe1, 0x22, 0x05, 0x8a, 0x22, 0x01, 0x6c, 0xab, 0x0e, 0x84, 0xf6, 0x60,
	0xac, 0xed, 0xf6, 0x4c, 0x73, 0x29, 0x99, 0xf0, 0x8a, 0x5c, 0x90, 0x54, 0x1c, 0xe5, 0xd8, 0x4b,
	0x5f, 0xa0, 0x6f, 0xd3, 0x87, 0xe8, 0xa5, 0x0f, 0x54, 0x0c, 0xc9, 0xfd, 0x93, 0x7d, 0xd2, 0xce,
	0x37, 0x33, 0x9c, 0x5f, 0x7e, 0x22, 0xec, 0x5d, 0x1b, 0x99, 0xcf, 0xc5, 0x77, 0xe1, 0xe7, 0x75,
	0x69, 0xb4, 0xd3, 0xa4, 0x17, 0xa4, 0x74, 0x0c, 0xa3, 0x89, 0xb4, 0x5c, 0x7f, 0x10, 0xe6, 0x9c,
	0x19, 0xb6, 0xb0, 0x69, 0x0a, 0x3b, 0xa7, 0x5a, 0xcd, 0xe4, 0x3c, 0xc8, 0x84, 0xc0, 0xe3, 0xa5,
	0x15, 0x86, 0x26, 0x2f, 0x92, 0x6f, 0x06, 0x99, 0xff, 0x4e, 0xcf, 0xa0, 0x77, 0xe2, 0xfd, 0xc9,
	0x08, 0x36, 0x64, 0x1e, 0x75, 0x1b, 0x32, 0x27, 0xaf, 0xe0, 0xa9, 0x54, 0x4e, 0x18, 0xc5, 0x8a,
	0xe9, 0xf9, 0x71, 0x9e, 0x1b, 0x61, 0x2d, 0xdd, 0xf0, 0xea, 0xfb, 0x8a, 0xf4, 0x67, 0x18, 0x86,
	0x73, 0x2e, 0x1c, 0x73, 0x82, 0xbc, 0x82, 0x1e, 0xf7, 0xa1, 0xfd, 0x81, 0xc3, 0xa3, 0xfd, 0xd7,
	0x31, 0xe7, 0x60, 0x14, 0xd2, 0xca, 0xa2, 0x4d, 0xfa, 0x35, 0x0c, 0x27, 0xe2, 0x83, 0xe4, 0xe2,
	0x72, 0x55, 0x0a, 0x4b, 0x0e, 0x20, 0xd6, 0xe4, 0x9d, 0xfb, 0x59, 0x55, 0xe1, 0xbf, 0x09, 0x8c,
	0x2e, 0xf4, 0xcc, 0xdd, 0x31, 0x23, 0xae, 0xca, 0x1c, 0xe3, 0xbc, 0x80, 0xe1, 0xd2, 0x7f, 0xf9,
	0xb0, 0xde, 0x3e, 0xc9, 0xda, 0x10, 0x79, 0x09, 0x23, 0x7e, 0x23, 0xf8, 0xed, 0x99, 0x36, 0xc1,
	0xc7, 0xd7, 0xd0, 0xcf, 0xd6, 0x50, 0xf2, 0x06, 0x86, 0x79, 0x93, 0x03, 0xdd, 0xf4, 0x69, 0xef,
	0x55, 0x69, 0xb7, 0xd2, 0xcb, 0xda, 0x76, 0x64, 0x0c, 0x9b, 0x4b, 0x53, 0xd0, 0xc7, 0xbe, 0x2f,
	0xf8, 0x89, 0x5d, 0x76, 0xe2, 0xa3, 0xa3, 0x5b, 0xa1, 0xcb, 0xf8, 0x8d, 0x15, 0x29, 0xed, 0xe4,
	0x6c, 0x45, 0x7b, 0xa1, 0xa2, 0x20, 0xa5, 0x67, 0xd5, 0x84, 0xe2, 0x0c, 0xf6, 0x61, 0xcb, 0xd6,
	0x85, 0x0c, 0xb2, 0x20, 0x60, 0x91, 0x05, 0xb3, 0x4e, 0x2a, 0xeb, 0x58, 0x51, 0xc4, 0x19, 0xb4,
	0xa1, 0xf4, 0x2d, 0x0c, 0x8f, 0x97, 0x4e, 0x4f, 0x83, 0x48, 0xbe, 0x04, 0x08, 0x2d, 0x70, 0x72,
	0x51, 0x9d, 0xd5, 0x42, 0x70, 0xd4, 0x5a, 0xc5, 0x3e, 0x6c, 0x68, 0x95, 0xfe, 0x97, 0xc0, 0x6e,
	0xb7, 0xb1, 0x47, 0x75, 0xdf, 0x66, 0xda, 0x04, 0xcf, 0x38, 0x8c, 0x35, 0x14, 0x63, 0x61, 0x26,
	0xfc, 0x86, 0xa9, 0xb9, 0x88, 0xb9, 0xb5, 0x10, 0xdc, 0x84, 0x38, 0xcc, 0xcd, 0xee, 0x26, 0xb4,
	0x0b, 0xaf, 0x46, 0xdc, 0x34, 0xe0, 0x71, 0xbb, 0x01, 0x6f, 0x60, 0xc8, 0x96, 0x4e, 0x57, 0x0d,
	0xd8, 0xea, 0xce, 0xa6, 0x55, 0x79, 0xd6, 0xb6, 0x4b, 0xff, 0x4a, 0x60, 0x78, 0xae, 0x8d, 0x63,
	0x45, 0x58, 0x85, 0x43, 0xe8, 0x5b, 0x39, 0x57, 0x22, 0xd7, 0x2a, 0x16, 0x53, 0xcb, 0xa8, 0x93,
	0x8a, 0xeb, 0x85, 0x54, 0xf3, 0xd8, 0x98, 0x5a, 0x46, 0x9d, 0x5e, 0xba, 0xb9, 0x46, 0xdd, 0x66,
	0xd0, 0x55, 0x32, 0xf9, 0x0a, 0x9e, 0x70, 0xbd, 0x58, 0x2c, 0x95, 0xe4, 0xcc, 0x49, 0xad, 0x62,
	0xe2, 0x5d, 0x30, 0xfd, 0x33, 0x81, 0xf1, 0xd4, 0xdf, 0x19, 0xe1, 0x2e, 0x84, 0xc1, 0xf5, 0xb1,
	0x21, 0x64, 0xc0, 0xe2, 0x8c, 0x6a, 0x99, 0xa4, 0xb0, 0x63, 0xc4, 0x42, 0x3b, 0xc1, 0x38, 0x6f,
	0xee, 0x5d, 0x07, 0xf3, 0x8b, 0x86, 0xf3, 0xdd, 0x8c, 0x8b, 0x86, 0x93, 0xc5, 0x12, 0xef, 0xe2,
	0xbc, 0x42, 0x26, 0xb5, 0x9c, 0x12, 0x18, 0x67, 0xa2, 0x2c, 0x18, 0x17, 0x36, 0x74, 0x7d, 0x3a,
	0x49, 0xdf, 0x41, 0xef, 0x84, 0xf1, 0xdb, 0x65, 0x89, 0x2b, 0x8a, 0xcd, 0x5e, 0xda, 0x98, 0x4b,
	0x94, 0xc8, 0x73, 0x18, 0x08, 0x63, 0xb4, 0xe1, 0x3a, 0x0f, 0xe3, 0x4d, 0xb2, 0x06, 0x48, 0x67,
	0x30, 0xfa, 0xe3, 0x46, 0x3a, 0x51, 0x48, 0xeb, 0x7e, 0x51, 0xce, 0xac, 0xaa, 0x65, 0xbd, 0xb2,
	0x62, 0xd2, 0x2c, 0x72, 0x1b, 0xc2, 0x8d, 0xe1, 0x46, 0x30, 0x17, 0x0c, 0xe2, 0xc6, 0x34, 0x08,
	0xd6, 0xa5, 0x58, 0x53, 0x17, 0x7e, 0xa7, 0x43, 0x18, 0xf8, 0x38, 0xbf, 0x49, 0xeb, 0xd2, 0xbf,
	0xfb, 0xb0, 0xd3, 0xe6, 0x91, 0xda, 0x23, 0x69, 0x3c, 0x70, 0x30, 0x9f, 0xe4, 0xfc, 0x5a, 0x88,
	0xd3, 0x1b, 0xa6, 0x94, 0x28, 0x62, 0xee, 0x5d, 0x10, 0xfb, 0x75, 0x1d, 0x7b, 0x11, 0xe3, 0xd5,
	0x32, 0x5e, 0xed, 0x05, 0xe3, 0xd5, 0xd5, 0x5e, 0x30, 0x8e, 0x71, 0xf2, 0x1b, 0x5e, 0xfa, 0x05,
	0xec, 0x67, 0xfe, 0x1b, 0xfb, 0x23, 0xcb, 0x8a, 0x1e, 0x7b, 0xde, 0xb6, 0x01, 0x08, 0x85, 0x6d,
	0x25, 0xdc, 0x82, 0xd9, 0x5b, 0xba, 0xed, 0x75, 0x95, 0x88, 0x9a, 0x39, 0x73, 0xe2, 0x8e, 0xad,
	0x68, 0x3f, 0x68, 0xa2, 0x88, 0xb3, 0x2f, 0x8d, 0xfe, 0xb8, 0xaa, 0x0e, 0x1d, 0x84, 0xd9, 0xb7,
	0x31, 0x8c, 0xea, 0x65, 0x5c, 0x6f, 0x0a, 0x61, 0x2a, 0x35, 0x80, 0x99, 0x5f, 0x5d, 0x9e, 0xd2,
	0x61, 0xc8, 0xfc, 0xea, 0xf2, 0x14, 0xed, 0x0b, 0xcd, 0x59, 0x71, 0x89, 0x0b, 0xb3, 0x13, 0xb2,
	0xac, 0x01, 0xec, 0x02, 0x6e, 0xcf, 0x27, 0xad, 0x04, 0x7d, 0x12, 0xba, 0x50, 0xc9, 0x98, 0xe7,
	0x42, 0xe7, 0xa2, 0x98, 0x4e, 0xe8, 0x28, 0xe4, 0x19, 0x45, 0xf2, 0x2d, 0x8c, 0x73, 0xe6, 0x98,
	0x75, 0xda, 0x88, 0xdf, 0x85, 0xb1, 0xb8, 0xfd, 0xbb, 0xde, 0xe4, 0x1e, 0x8e, 0xf1, 0xed, 0x5d,
	0x65, 0x34, 0x0e, 0xf1, 0x6b, 0x00, 0x37, 0x82, 0x95, 0xb2, 0x52, 0x3f, 0x0d, 0x1b, 0xd1, 0x20,
	0xe4, 0x1d, 0x8c, 0x6c, 0x87, 0x9e, 0x28, 0xf1, 0x14, 0x70, 0x50, 0x51, 0x40, 0x97, 0xbc, 0xb2,
	0x35, 0x6b, 0x72, 0x0c, 0xbb, 0x5d, 0xe4, 0x88, 0xee, 0xf9, 0x03, 0x9e, 0x3d, 0x7c, 0xc0, 0x51,
	0xb6, 0x6e, 0xef, 0x69, 0x4e, 0xaa, 0xdb, 0x93, 0xa5, 0x73, 0x5a, 0xd1, 0x7d, 0xbf, 0x00, 0x2d,
	0x04, 0xe9, 0xb2, 0x0c, 0x54, 0x13, 0xaf, 0x37, 0xfd, 0x2c, 0xd0, 0x65, 0x17, 0xc5, 0xa6, 0x05,
	0xe4, 0x54, 0x2b, 0x25, 0xb8, 0xa7, 0x8c, 0x83, 0xd0, 0xb4, 0x75, 0x1c, 0x69, 0xaf, 0x6c, 0xe8,
	0x8b, 0x3e, 0xeb, 0xd2, 0x5e, 0x8b, 0xd9, 0xb2, 0xb6, 0x1d, 0x99, 0xc0, 0x58, 0xae, 0x71, 0x0d,
	0xa5, 0xde, 0x97, 0x56, 0xbe, 0xeb, 0x5c, 0x94, 0xdd, 0xf3, 0xc0, 0x82, 0x67, 0x8c, 0x3b, 0x6d,
	0x56, 0x4a, 0xdc, 0xd1, 0xcf, 0x43, 0xc1, 0x0d, 0x82, 0x51, 0xcc, 0x1a, 0x9b, 0xd0, 0xc3, 0x6e,
	0x94, 0x75, 0xb6, 0xc9, 0xee, 0x79, 0x90, 0x97, 0xd0, 0xbb, 0xf6, 0xfc, 0x43, 0xbf, 0xf0, 0xbe,
	0xa3, 0xfa, 0x9d, 0xe0, 0xd1, 0x2c, 0x6a, 0xf1, 0x4e, 0x58, 0xc7, 0x8c, 0x13, 0xe6, 0x57, 0xe9,
	0xa6, 0x13, 0xfa, 0x3c, 0xdc, 0x89, 0x36, 0x76, 0xf4, 0x4f, 0x02, 0xdb, 0x31, 0x7d, 0xf2, 0x23,
	0xf4, 0xab, 0xc7, 0x10, 0xa9, 0xb7, 0xa4, 0xfb, 0x3c, 0x3a, 0x1c, 0x75, 0xdf, 0x24, 0xe9, 0xa3,
	0xef, 0x13, 0xf2, 0x16, 0x46, 0xef, 0x85, 0x6b, 0xbf, 0x64, 0xd6, 0xfe, 0xaf, 0xa2, 0xef, 0x5e,
	0xd7, 0xd7, 0x9b, 0xa6, 0x8f, 0xc8, 0x4f, 0x30, 0x78, 0x2f, 0x5c, 0x64, 0xa5, 0x87, 0x3d, 0x1f,
	0x7c, 0x09, 0xa5, 0x8f, 0xae, 0x7b, 0xfe, 0x35, 0xf7, 0xc3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xfb, 0xb1, 0xce, 0xec, 0xe4, 0x09, 0x00, 0x00,
}
